#2.1 
- 버튼 클릭 카운트 페이지로 vailla js 와 react 비교해보기
- html, js
<body style="text-align: center;">
    <!-- html, js 로 click counter 만들기-->
    <h1>Button click counter for vanilla js</h1>
    <hr><br>
    <span>total clicks: 0</span>
    <br><br>
    <button id="btn">click here!</button>
</body>
    <script>
        let counter = 0;
        const span = document.querySelector("span");
        const button =document.querySelector("#btn");
        function handleClick(){
            console.log("btn clicked");
            counter = counter +1;
            span.innerText = `total clicks: ${counter}`
        };
        button.addEventListener("click",handleClick);
    </script>

#2.2 
- react (실제 react에서는 잘사용하지 않는 방식)

- createElement(tag name, property(없으면 null), content(여러태그 렌더링을 하고싶을때는 array로 처리 []))
    ex) const container =React.createElement("div", null, [span, btn]); div에 감싸져있는 span, button 생성

- BABEL 
    - Uncaught SyntaxError: Unexpected token '<' 해결
         <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
        <script type="text/babel"></script>

- state
 - 

- rendering
    -before
     const root = document.getElementById("root");
        
        let counter = 0;
        const countUp = () => {
            counter = counter +1;
            rendering(); //rendering
        };
        const rendering = () => {
            ReactDOM.render(<Container />,root); //rerendering
        }
        
        const Container = () => (
            <div>
                <h3>total clicks: {counter}</h3>
                <button onClick={countUp}>Click here</button>
            </div>);

        rendering(); //rendering
    - 최초 렌더링 후, 값이 바뀔때마다 렌더링 필요(렌더링 코드 반복 문제)
    - useState 사용
     - console 출력 시  [undefined, function] 형태를 가짐
     - [데이터, 데이터 변경 시 사용할 함수]
     - 구조분해할당
     - modifier

